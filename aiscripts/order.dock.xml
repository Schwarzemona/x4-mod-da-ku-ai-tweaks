<?xml version='1.0' encoding='utf-8'?>
<diff>
	<!-- debug
	-->
	<add pos="before" sel="//move_docking">
		<debug_text text="@this.assignedcontrolled.idcode + ' move_docking'" chance="if @this.assignedcontrolled.idcode == @global.$kAAIT.$debugChance_idCode or @global.$kAAIT.$debugChance_idCode == 'all' then @global.$kAAIT_Data.$debugChance else 0" />
	</add>
	<add pos="before" sel="//run_script[@name=&quot;'move.generic'&quot;][@result=&quot;$movesuccess&quot;]">
		<debug_text text="@this.assignedcontrolled.idcode + ' run_script move.generic'" chance="if @this.assignedcontrolled.idcode == @global.$kAAIT.$debugChance_idCode or @global.$kAAIT.$debugChance_idCode == 'all' then @global.$kAAIT_Data.$debugChance else 0" />
	</add>
	<!--
		purpose: allow kuertee avoid behaviour
		<label name="start"/>
	-->
	<add pos="before" sel="//label[@name=&quot;start&quot;]">
		<resume label="start" />

		<label name="kAAIT_label_avoid" />
		<debug_text text="@this.assignedcontrolled.idcode + ' LABEL kAAIT_label_avoid'" chance="if @this.assignedcontrolled.idcode == @global.$kAAIT.$debugChance_idCode or @global.$kAAIT.$debugChance_idCode == 'all' then @global.$kAAIT_Data.$debugChance else 0" />
		<include_interrupt_actions ref="kAAIT_Order_Avoid" />
		<wait min="1s" max="3s" comment="stop this order from continuing as the new order is created" />
		<resume label="start" comment="in case the new order fails, do this" />
	</add>
	<!--
	  add. purpose: cancel waitforsignal on destination when an order changes.
	  (1) <interrupts>
	  (2) <create_order id="'WaitForSignal'" object="$destination" immediate="true">
	  (3) <on_abort>
	-->
	<add sel="//interrupts">
		<library>
			<actions name="CancelWaitOrdersWhenOrderChanges">
				<do_if value="@$kAAIT_order_waitforsignal.exists">
					<cancel_order order="$kAAIT_order_waitforsignal" />
					<!-- start: when this is changed, ensure that the other cancellation order process in this file is also changed -->
					<set_value name="$kAAIT_ordersToCancel" exact="['order.dock', 'order.dock.wait', 'order.repair']" />
					<do_if value="@this.assignedcontrolled.order.script == 'order.dock'" comment="if a new order overrode 'order.dock', then allow Repair after that order is done. otherwise, this Dock order was simply cancelled, so remove the Repair order as well.">
						<set_value name="$kAAIT_ordersToCancel" exact="['order.dock', 'order.dock.wait']" />
					</do_if>
					<do_if value="this.assignedcontrolled.orders.count">
						<do_for_each name="$kAAIT_order" in="this.assignedcontrolled.orders" reverse="true">
							<do_if value="
								$kAAIT_ordersToCancel.indexof.{$kAAIT_order.script} and
								$kAAIT_order != this.assignedcontrolled.defaultorder">
								<debug_text text="@this.assignedcontrolled.idcode + ' cancel_order ' + $kAAIT_order.script" chance="if @$destination.idcode == @global.$kAAIT.$debugChance_idCode then @global.$kAAIT_Data.$debugChance else 0" />
								<cancel_order order="$kAAIT_order" />
							</do_if>
						</do_for_each>
					</do_if>
					<!-- end: when this is changed, ensure that the other cancellation order process in this file is also changed -->
				</do_if>
			</actions>
		</library>
	</add>
	<add sel="//create_order[@id=&quot;'WaitForSignal'&quot;][@object=&quot;$destination&quot;]" type="@name">$kAAIT_order_waitforsignal</add>
	<add pos="before" sel="//return[1]">
		<include_interrupt_actions ref="CancelWaitOrdersWhenOrderChanges" />
	</add>
	<add pos="before" sel="//return[2]">
		<include_interrupt_actions ref="CancelWaitOrdersWhenOrderChanges" />
	</add>
	<add sel="//on_abort">
		<debug_text text="@this.assignedcontrolled.idcode + ' on_abort $kAAIT_order_waitforsignal: ' + @$kAAIT_order_waitforsignal + ' cancel wait for signal on destination'" chance="if @this.assignedcontrolled.idcode == @global.$kAAIT.$debugChance_idCode or @global.$kAAIT.$debugChance_idCode == 'all' then @global.$kAAIT_Data.$debugChance else 0" />
		<debug_text text="@this.assignedcontrolled.idcode + ' on_abort $destination.idcode: ' + $destination.idcode + ' $kAAIT_order_waitforsignal: ' + $kAAIT_order_waitforsignal + ' cancel wait for signal'" chance="if @$destination.idcode == @global.$kAAIT.$debugChance_idCode then @global.$kAAIT_Data.$debugChance else 0" />
		<do_if value="@$kAAIT_order_waitforsignal.exists">
			<!-- start: when this is changed, ensure that the other cancellation order process in this file is also changed -->
			<set_value name="$kAAIT_ordersToCancel" exact="['order.dock', 'order.dock.wait', 'order.repair']" />
			<do_if value="@this.assignedcontrolled.order.script == 'order.dock'" comment="if a new order overrode 'order.dock', then allow Repair after that order is done. otherwise, this Dock order was simply cancelled, so remove the Repair order as well.">
				<set_value name="$kAAIT_ordersToCancel" exact="['order.dock', 'order.dock.wait']" />
			</do_if>
			<do_if value="this.assignedcontrolled.orders.count">
				<do_for_each name="$kAAIT_order" in="this.assignedcontrolled.orders" reverse="true">
					<do_if value="
						$kAAIT_ordersToCancel.indexof.{$kAAIT_order.script} and
						$kAAIT_order != this.assignedcontrolled.defaultorder">
						<debug_text text="@this.assignedcontrolled.idcode + ' cancel_order ' + $kAAIT_order.script" chance="if @$destination.idcode == @global.$kAAIT.$debugChance_idCode then @global.$kAAIT_Data.$debugChance else 0" />
						<cancel_order order="$kAAIT_order" />
					</do_if>
				</do_for_each>
			</do_if>
			<!-- end: when this is changed, ensure that the other cancellation order process in this file is also changed -->
		</do_if>
	</add>
</diff>
